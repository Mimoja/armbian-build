verbosity=7

# baudrate=115200
# board=imx8mn_var_som
# board_name=VAR-SOM-MX8M-NANO
# boot_a_script=load ${devtype} ${devnum}:${distro_bootpart} ${scriptaddr} ${prefix}${script}; source ${scriptaddr}
# boot_efi_binary=load ${devtype} ${devnum}:${distro_bootpart} ${kernel_addr_r} efi/boot/bootaa64.efi; if fdt addr ${fdt_addr_r}; then bootefi ${kernel_addr_r} ${fdt_addr_r};else bootefi ${kernel_addr_r} ${fdtcontroladdr};fi
# boot_efi_bootmgr=if fdt addr ${fdt_addr_r}; then bootefi bootmgr ${fdt_addr_r};else bootefi bootmgr;fi
# boot_extlinux=sysboot ${devtype} ${devnum}:${distro_bootpart} any ${scriptaddr} ${prefix}${boot_syslinux_conf}
# boot_fdt=try
# boot_net_usb_start=usb start
# boot_prefixes=/ /boot/
# boot_script_dhcp=boot.scr.uimg
# boot_scripts=boot.scr.uimg boot.scr
# boot_syslinux_conf=extlinux/extlinux.conf
# boot_targets=usb0 mmc1 mmc2
# bootcmd=run bsp_bootcmd
# bootcmd_mfg=run mfgtool_args;if iminfo ${initrd_addr}; then if test ${tee} = yes; then bootm ${tee_addr} ${initrd_addr} ${fdt_addr}; else booti ${loadaddr} ${initrd_addr} ${fdt_addr}; fi; else echo "Run fastboot ..."; fastboot 0; fi;
# bootcmd_mmc1=devnum=1; run mmc_boot
# bootcmd_mmc2=devnum=2; run mmc_boot
# bootcmd_usb0=devnum=0; run usb_boot
# bootdelay=1
# bootdir=/boot
# bootm_size=0x10000000
# bootscript=echo Running bootscript from mmc ...; source
# bsp_bootcmd=echo Running BSP bootcmd ...; run ramsize_check; mmc dev ${mmcdev}; if mmc rescan; then if test ${use_m7} = yes && run loadm7bin; then run runm7bin; fi; if run loadbootscript; then run bootscript; else if run loadimage; then run mmcboot; else run netboot; fi; fi; else booti ${loadaddr} - ${fdt_addr}; fi;
# bsp_script=boot.scr
# carrier_rev=sym-1.7
# console=ttymxc3,115200 earlycon=ec_imx6q,0x30a60000,115200
# cpu=armv8
# dfu_alt_info=mmc 2=1 raw 0x40 0x1000 mmcpart
# distro_bootcmd=for target in ${boot_targets}; do run bootcmd_${target}; done
# efi_dtb_prefixes=/ /dtb/ /dtb/current/
# emmc_dev=2
# ethaddr=f8:dc:7a:ae:1b:84
# ethprime=FEC
# fastboot_dev=mmc1
# fdt_addr=0x43000000
# fdt_addr_r=0x43000000
# fdt_file=undefined
# fdt_high=0xffffffffffffffff
# fdtcontroladdr=7defa210
# findfdt=if test $fdt_file = undefined; then setenv fdt_file imx8mn-var-som-symphony.dtb; fi;
# image=Image.gz
# img_addr=0x42000000
# initrd_addr=0x43800000
# initrd_high=0xffffffffffffffff
# ip_dyn=yes
# kboot=booti
# kernel_addr_r=0x40480000
# load_efi_dtb=load ${devtype} ${devnum}:${distro_bootpart} ${fdt_addr_r} ${prefix}${efi_fdtfile}
# loadaddr=0x40480000
# loadbootscript=load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${bootdir}/${bsp_script};
# loadfdt=run findfdt; echo fdt_file=${fdt_file}; load mmc ${mmcdev}:${mmcpart} ${fdt_addr_r} ${bootdir}/${fdt_file}
# loadimage=load mmc ${mmcdev}:${mmcpart} ${img_addr} ${bootdir}/${image};unzip ${img_addr} ${loadaddr}
# loadm7bin=load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${bootdir}/${m7_bin} && cp.b ${loadaddr} ${m7_addr} ${filesize}; echo Init rsc_table region memory; mw.b 400ff000 0 10
# m7_addr=0x7e0000
# m7_bin=hello_world.bin
# mfgtool_args=setenv bootargs console=${console},${baudrate} rdinit=/linuxrc clk_ignore_unused
# mmc_boot=if mmc dev ${devnum}; then devtype=mmc; run scan_dev_for_boot_part; fi
# mmcargs=setenv bootargs ${mcore_clk} console=${console} root=/dev/mmcblk${mmcblk}p${mmcpart} rootwait rw ${cma_size} cma_name=linux,cma
# mmcautodetect=yes
# mmcblk=1
# mmcboot=echo Booting from mmc ...; run mmcargs; run optargs; if test ${boot_fdt} = yes || test ${boot_fdt} = try; then if run loadfdt; then booti ${loadaddr} - ${fdt_addr_r}; else echo WARN: Cannot load the DT; fi; else echo wait for boot; fi;
# mmcdev=1
# mmcpart=1
# nandfit_part=yes
# netargs=setenv bootargs ${mcore_clk} console=${console} root=/dev/nfs ${cma_size} cma_name=linux,cma ip=dhcp nfsroot=${serverip}:${nfsroot},v3,tcp
# netboot=echo Booting from net ...; if test ${ip_dyn} = yes; then setenv get_cmd dhcp; else setenv get_cmd tftp; fi; ${get_cmd} ${img_addr} ${image}; unzip ${img_addr} ${loadaddr};run netargs; run optargs; if test ${boot_fdt} = yes || test ${boot_fdt} = try; then run findfdt; echo fdt_file=${fdt_file}; if ${get_cmd} ${fdt_addr_r} ${fdt_file}; then booti ${loadaddr} - ${fdt_addr_r}; else echo WARN: Cannot load the DT; fi; else booti; fi;
# optargs=setenv bootargs ${bootargs} ${kernelargs};
# prepare_mcore=setenv mcore_clk clk-imx8mn.mcore_booted;
# ramsize_check=if test $sdram_size -le 512; then setenv cma_size cma=320M; else setenv cma_size cma=576M; fi;
# runm7bin=if test ${m7_addr} = 0x7e0000; then echo Booting M7 from TCM; else echo Booting M7 from DRAM; dcache flush; fi; bootaux ${m7_addr};
# scan_dev_for_boot=echo Scanning ${devtype} ${devnum}:${distro_bootpart}...; for prefix in ${boot_prefixes}; do run scan_dev_for_extlinux; run scan_dev_for_scripts; done;run scan_dev_for_efi;
# scan_dev_for_boot_part=part list ${devtype} ${devnum} -bootable devplist; env exists devplist || setenv devplist 1; for distro_bootpart in ${devplist}; do if fstype ${devtype} ${devnum}:${distro_bootpart} bootfstype; then run scan_dev_for_boot; fi; done; setenv devplist
# scan_dev_for_efi=setenv efi_fdtfile ${fdtfile}; setenv efi_dtb_prefixes; run loadfdt; for prefix in ${efi_dtb_prefixes}; do if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${efi_fdtfile}; then run load_efi_dtb; fi;done;run boot_efi_bootmgr;if test -e ${devtype} ${devnum}:${distro_bootpart} efi/boot/bootaa64.efi; then echo Found EFI removable media binary efi/boot/bootaa64.efi; run boot_efi_binary; echo EFI LOAD FAILED: continuing...; fi; setenv efi_fdtfile
# scan_dev_for_extlinux=if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${boot_syslinux_conf}; then echo Found ${prefix}${boot_syslinux_conf}; run boot_extlinux; echo SCRIPT FAILED: continuing...; fi
# scan_dev_for_scripts=for script in ${boot_scripts}; do if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${script}; then echo Found U-Boot script ${prefix}${script}; run boot_a_script; echo SCRIPT FAILED: continuing...; fi; done
# scriptaddr=0x43500000
# sd_dev=1
# sdram_size=1024
# serial#=3833c209daba60c2
# soc=imx8m
# soc_type=imx8mn
# usb_boot=usb start; if usb dev ${devnum}; then devtype=usb; run scan_dev_for_boot_part; fi
# use_m7=no
# vendor=variscite
